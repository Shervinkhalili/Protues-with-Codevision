
AVRASM ver. 2.1.30  C:\Users\ASUS\OneDrive\Documents\Microprocessor\strongbox\Debug\List\strongbox.asm Fri Dec 31 11:19:07 2021

C:\Users\ASUS\OneDrive\Documents\Microprocessor\strongbox\Debug\List\strongbox.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\ASUS\OneDrive\Documents\Microprocessor\strongbox\Debug\List\strongbox.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\ASUS\OneDrive\Documents\Microprocessor\strongbox\Debug\List\strongbox.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\ASUS\OneDrive\Documents\Microprocessor\strongbox\Debug\List\strongbox.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\ASUS\OneDrive\Documents\Microprocessor\strongbox\Debug\List\strongbox.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\ASUS\OneDrive\Documents\Microprocessor\strongbox\Debug\List\strongbox.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\ASUS\OneDrive\Documents\Microprocessor\strongbox\Debug\List\strongbox.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\ASUS\OneDrive\Documents\Microprocessor\strongbox\Debug\List\strongbox.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\ASUS\OneDrive\Documents\Microprocessor\strongbox\Debug\List\strongbox.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\ASUS\OneDrive\Documents\Microprocessor\strongbox\Debug\List\strongbox.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _total_number=R4
                 	.DEF _total_number_msb=R5
                 	.DEF _a=R6
                 	.DEF _a_msb=R7
                 	.DEF _b=R8
                 	.DEF _b_msb=R9
                 	.DEF _c=R10
                 	.DEF _c_msb=R11
                 	.DEF _d=R12
                 	.DEF _d_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 00bd 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _Pattern:
00002a 00fe
00002b 00fd
00002c 00fb
00002d 00f7      	.DB  0xFE,0x0,0xFD,0x0,0xFB,0x0,0xF7,0x0
                 _key_number:
00002e 0007
00002f 0008
000030 0009
000031 0004      	.DB  0x7,0x0,0x8,0x0,0x9,0x0,0x4,0x0
000032 0005
000033 0006
000034 0001
000035 0002      	.DB  0x5,0x0,0x6,0x0,0x1,0x0,0x2,0x0
000036 0003
000037 000b
000038 0000
000039 000a      	.DB  0x3,0x0,0xB,0x0,0x0,0x0,0xA,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00003a 0001      	.DB  0x1,0x0
                 
                 _0x0:
00003b 002a
00003c 2a2a
00003d 2a00
00003e 2a2a      	.DB  0x2A,0x0,0x2A,0x2A,0x0,0x2A,0x2A,0x2A
00003f 2a00
000040 2a2a
000041 002a
000042 6f79      	.DB  0x0,0x2A,0x2A,0x2A,0x2A,0x0,0x79,0x6F
000043 7275
000044 7020
000045 7361
000046 2073      	.DB  0x75,0x72,0x20,0x70,0x61,0x73,0x73,0x20
000047 7369
000048 2000
000049 2020
00004a 2020      	.DB  0x69,0x73,0x0,0x20,0x20,0x20,0x20,0x20
00004b 6320
00004c 726f
00004d 6572
00004e 7463      	.DB  0x20,0x63,0x6F,0x72,0x72,0x65,0x63,0x74
00004f 6f00
000050 6570
000051 216e
000052 2000      	.DB  0x0,0x6F,0x70,0x65,0x6E,0x21,0x0,0x20
000053 2020
000054 6920
000055 636e
000056 726f      	.DB  0x20,0x20,0x20,0x69,0x6E,0x63,0x6F,0x72
000057 6572
000058 7463
000059 6500
00005a 746e      	.DB  0x72,0x65,0x63,0x74,0x0,0x65,0x6E,0x74
00005b 7265
00005c 7020
00005d 7361
00005e 7773      	.DB  0x65,0x72,0x20,0x70,0x61,0x73,0x73,0x77
00005f 726f
000060 0064
000061 6572
000062 6573      	.DB  0x6F,0x72,0x64,0x0,0x72,0x65,0x73,0x65
000063 2074
000064 6170
000065 7373
000066 6500      	.DB  0x74,0x20,0x70,0x61,0x73,0x73,0x0,0x65
000067 746e
000068 7265
000069 6f20
00006a 646c      	.DB  0x6E,0x74,0x65,0x72,0x20,0x6F,0x6C,0x64
00006b 7020
00006c 7361
00006d 3a73
00006e 7000      	.DB  0x20,0x70,0x61,0x73,0x73,0x3A,0x0,0x70
00006f 7361
000070 2073
000071 6f63
000072 7272      	.DB  0x61,0x73,0x73,0x20,0x63,0x6F,0x72,0x72
000073 6365
000074 0074
000075 6e65
000076 6574      	.DB  0x65,0x63,0x74,0x0,0x65,0x6E,0x74,0x65
000077 2072
000078 656e
000079 2077
00007a 6170      	.DB  0x72,0x20,0x6E,0x65,0x77,0x20,0x70,0x61
00007b 7373
00007c 3a20
00007d 6e00
00007e 7765      	.DB  0x73,0x73,0x20,0x3A,0x0,0x6E,0x65,0x77
00007f 7020
000080 7361
000081 2073
000082 7369      	.DB  0x20,0x70,0x61,0x73,0x73,0x20,0x69,0x73
000083 3a20
000084 0020
000085 6170
000086 7373      	.DB  0x20,0x3A,0x20,0x0,0x70,0x61,0x73,0x73
000087 6920
000088 636e
000089 726f
00008a 6572      	.DB  0x20,0x69,0x6E,0x63,0x6F,0x72,0x72,0x65
00008b 7463
00008c 7000
00008d 656c
00008e 7361      	.DB  0x63,0x74,0x0,0x70,0x6C,0x65,0x61,0x73
00008f 2065
000090 6572
000091 6570
000092 7461      	.DB  0x65,0x20,0x72,0x65,0x70,0x65,0x61,0x74
000093 4300
000094 6f6c
000095 6573
000096 2120      	.DB  0x0,0x43,0x6C,0x6F,0x73,0x65,0x20,0x21
000097 4500
000098 746e
000099 7265
00009a 5020      	.DB  0x0,0x45,0x6E,0x74,0x65,0x72,0x20,0x50
00009b 7361
00009c 7773
00009d 726f
00009e 3a64      	.DB  0x61,0x73,0x73,0x77,0x6F,0x72,0x64,0x3A
C:\Users\ASUS\OneDrive\Documents\Microprocessor\strongbox\Debug\List\strongbox.asm(1165): warning: .cseg .db misalignment - padding zero byte
00009f 0000      	.DB  0x0
                 _0x2000060:
C:\Users\ASUS\OneDrive\Documents\Microprocessor\strongbox\Debug\List\strongbox.asm(1167): warning: .cseg .db misalignment - padding zero byte
0000a0 0001      	.DB  0x1
                 _0x2000000:
0000a1 4e2d
0000a2 4e41
0000a3 4900
0000a4 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\ASUS\OneDrive\Documents\Microprocessor\strongbox\Debug\List\strongbox.asm(1170): warning: .cseg .db misalignment - padding zero byte
0000a5 0000      	.DB  0x0
                 _0x2020003:
0000a6 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
0000a7 0002      	.DW  0x02
0000a8 0004      	.DW  0x04
0000a9 0074      	.DW  __REG_VARS*2
                 
0000aa 0002      	.DW  0x02
0000ab 0260      	.DW  _0x19
0000ac 0076      	.DW  _0x0*2
                 
0000ad 0003      	.DW  0x03
0000ae 0262      	.DW  _0x19+2
0000af 0078      	.DW  _0x0*2+2
                 
0000b0 0004      	.DW  0x04
0000b1 0265      	.DW  _0x19+5
0000b2 007b      	.DW  _0x0*2+5
                 
0000b3 0005      	.DW  0x05
0000b4 0269      	.DW  _0x19+9
0000b5 007f      	.DW  _0x0*2+9
                 
0000b6 0001      	.DW  0x01
0000b7 027e      	.DW  __seed_G100
0000b8 0140      	.DW  _0x2000060*2
                 
0000b9 0002      	.DW  0x02
0000ba 0282      	.DW  __base_y_G101
0000bb 014c      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
0000bc 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
0000bd 94f8      	CLI
0000be 27ee      	CLR  R30
0000bf bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
0000c0 e0f1      	LDI  R31,1
0000c1 bffb      	OUT  GICR,R31
0000c2 bfeb      	OUT  GICR,R30
0000c3 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000c4 e08d      	LDI  R24,(14-2)+1
0000c5 e0a2      	LDI  R26,2
0000c6 27bb      	CLR  R27
                 __CLEAR_REG:
0000c7 93ed      	ST   X+,R30
0000c8 958a      	DEC  R24
0000c9 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000ca e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000cb e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000cc e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000cd 93ed      	ST   X+,R30
0000ce 9701      	SBIW R24,1
0000cf f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000d0 e4ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000d1 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000d2 9185      	LPM  R24,Z+
0000d3 9195      	LPM  R25,Z+
0000d4 9700      	SBIW R24,0
0000d5 f061      	BREQ __GLOBAL_INI_END
0000d6 91a5      	LPM  R26,Z+
0000d7 91b5      	LPM  R27,Z+
0000d8 9005      	LPM  R0,Z+
0000d9 9015      	LPM  R1,Z+
0000da 01bf      	MOVW R22,R30
0000db 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000dc 9005      	LPM  R0,Z+
0000dd 920d      	ST   X+,R0
0000de 9701      	SBIW R24,1
0000df f7e1      	BRNE __GLOBAL_INI_LOOP
0000e0 01fb      	MOVW R30,R22
0000e1 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000e2 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000e3 bfed      	OUT  SPL,R30
0000e4 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000e5 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000e6 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000e7 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000e8 940c 01ec 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;
                 ;Project : strongbox
                 ;Date    : 12/20/2021
                 ;Author  : Sadra.Termehbaf & Shervin Khalili
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 1.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;
                 ; //Declare your global variables here
                 ;flash int Pattern[4]={0xFE, 0xFD, 0xFB, 0xF7};
                 ;flash int key_number [4][3]={{7,8,9},{4,5,6},{1,2,3},{11,0,10}};
                 ;int total_number=1 , a , b , c , d ;
                 ;char password[4];
                 ;int y11,y12,y13,y14,y15;
                 ;int my_password=0000;
                 ;int key(void)
                 ; 0000 001E {
                 
                 	.CSEG
                 _key:
                 ; .FSTART _key
                 ; 0000 001F     while(1)
                 _0x3:
                 ; 0000 0020     {   int j, column = 3;
                 ; 0000 0021 
                 ; 0000 0022           for( j=0; j<4; j++)
0000ea 9724      	SBIW R28,4
0000eb e0e3      	LDI  R30,LOW(3)
0000ec 83e8      	ST   Y,R30
0000ed e0e0      	LDI  R30,LOW(0)
0000ee 83e9      	STD  Y+1,R30
                 ;	j -> Y+2
                 ;	column -> Y+0
0000ef 83ea      	STD  Y+2,R30
0000f0 83eb      	STD  Y+2+1,R30
                 _0x7:
0000f1 81aa      	LDD  R26,Y+2
0000f2 81bb      	LDD  R27,Y+2+1
0000f3 9714      	SBIW R26,4
0000f4 f554      	BRGE _0x8
                 ; 0000 0023           {
                 ; 0000 0024              PORTD = Pattern[j];
0000f5 81ea      	LDD  R30,Y+2
0000f6 81fb      	LDD  R31,Y+2+1
0000f7 e5a4      	LDI  R26,LOW(_Pattern*2)
0000f8 e0b0      	LDI  R27,HIGH(_Pattern*2)
0000f9 0fee      	LSL  R30
0000fa 1fff      	ROL  R31
0000fb 0fea      	ADD  R30,R26
0000fc 1ffb      	ADC  R31,R27
0000fd 9004      	LPM  R0,Z
0000fe ba02      	OUT  0x12,R0
                 ; 0000 0025 
                 ; 0000 0026              if (PIND.4 == 0)
0000ff 9984      	SBIC 0x10,4
000100 c006      	RJMP _0x9
                 ; 0000 0027              {
                 ; 0000 0028                column  = 0;
000101 e0e0      	LDI  R30,LOW(0)
000102 83e8      	STD  Y+0,R30
000103 83e9      	STD  Y+0+1,R30
                 ; 0000 0029                while (PIND.4 == 0) {};
                 _0xA:
000104 9b84      	SBIS 0x10,4
000105 cffe      	RJMP _0xA
                 ; 0000 002A                break;
000106 c018      	RJMP _0x8
                 ; 0000 002B              }
                 ; 0000 002C              else
                 _0x9:
                 ; 0000 002D                  if (PIND.5 == 0)
000107 9985      	SBIC 0x10,5
000108 c007      	RJMP _0xE
                 ; 0000 002E                  {
                 ; 0000 002F                    column  = 1;
000109 e0e1      	LDI  R30,LOW(1)
00010a e0f0      	LDI  R31,HIGH(1)
00010b 83e8      	ST   Y,R30
00010c 83f9      	STD  Y+1,R31
                 ; 0000 0030                    while (PIND.5 == 0) {};
                 _0xF:
00010d 9b85      	SBIS 0x10,5
00010e cffe      	RJMP _0xF
                 ; 0000 0031                    break;
00010f c00f      	RJMP _0x8
                 ; 0000 0032                  }
                 ; 0000 0033                  else
                 _0xE:
                 ; 0000 0034                      if (PIND.6 == 0)
000110 9986      	SBIC 0x10,6
000111 c007      	RJMP _0x13
                 ; 0000 0035                      {
                 ; 0000 0036                        column  = 2;
000112 e0e2      	LDI  R30,LOW(2)
000113 e0f0      	LDI  R31,HIGH(2)
000114 83e8      	ST   Y,R30
000115 83f9      	STD  Y+1,R31
                 ; 0000 0037                        while (PIND.6 == 0) {};
                 _0x14:
000116 9b86      	SBIS 0x10,6
000117 cffe      	RJMP _0x14
                 ; 0000 0038                        break;
000118 c006      	RJMP _0x8
                 ; 0000 0039                      }
                 ; 0000 003A 
                 ; 0000 003B              }
                 _0x13:
000119 81ea      	LDD  R30,Y+2
00011a 81fb      	LDD  R31,Y+2+1
00011b 9631      	ADIW R30,1
00011c 83ea      	STD  Y+2,R30
00011d 83fb      	STD  Y+2+1,R31
00011e cfd2      	RJMP _0x7
                 _0x8:
                 ; 0000 003C 
                 ; 0000 003D               if (column != 3)
00011f 81a8      	LD   R26,Y
000120 81b9      	LDD  R27,Y+1
000121 9713      	SBIW R26,3
000122 f091      	BREQ _0x17
                 ; 0000 003E                   return key_number[j][column];
000123 81aa      	LDD  R26,Y+2
000124 81bb      	LDD  R27,Y+2+1
000125 e0e6      	LDI  R30,LOW(6)
000126 940e 04e0 	CALL __MULB1W2U
000128 5ae4      	SUBI R30,LOW(-_key_number*2)
000129 4fff      	SBCI R31,HIGH(-_key_number*2)
00012a 01df      	MOVW R26,R30
00012b 81e8      	LD   R30,Y
00012c 81f9      	LDD  R31,Y+1
00012d 0fee      	LSL  R30
00012e 1fff      	ROL  R31
00012f 0fea      	ADD  R30,R26
000130 1ffb      	ADC  R31,R27
000131 940e 051a 	CALL __GETW1PF
000133 9624      	ADIW R28,4
000134 9508      	RET
                 ; 0000 003F 
                 ; 0000 0040 
                 ; 0000 0041     }
                 _0x17:
000135 9624      	ADIW R28,4
000136 cfb3      	RJMP _0x3
                 ; 0000 0042 }
                 ; .FEND
                 ;void amaliat (int y)
                 ; 0000 0044 {
                 _amaliat:
                 ; .FSTART _amaliat
                 ; 0000 0045     if(total_number==1)
000137 93ba      	ST   -Y,R27
000138 93aa      	ST   -Y,R26
                 ;	y -> Y+0
000139 e0e1      	LDI  R30,LOW(1)
00013a e0f0      	LDI  R31,HIGH(1)
00013b 15e4      	CP   R30,R4
00013c 05f5      	CPC  R31,R5
00013d f491      	BRNE _0x18
                 ; 0000 0046     {
                 ; 0000 0047         y11=y;
00013e 81e8      	LD   R30,Y
00013f 81f9      	LDD  R31,Y+1
000140 93e0 0272 	STS  _y11,R30
000142 93f0 0273 	STS  _y11+1,R31
                 ; 0000 0048         total_number++;
000144 01f2      	MOVW R30,R4
000145 9631      	ADIW R30,1
000146 012f      	MOVW R4,R30
                 ; 0000 0049         a = y ;
                +
000147 8068     +LDD R6 , Y + 0
000148 8079     +LDD R7 , Y + 0 + 1
                 	__GETWRS 6,7,0
                 ; 0000 004A         lcd_clear();
000149 940e 03ca 	CALL _lcd_clear
                 ; 0000 004B         lcd_puts("*");
                +
00014b e6a0     +LDI R26 , LOW ( _0x19 + ( 0 ) )
00014c e0b2     +LDI R27 , HIGH ( _0x19 + ( 0 ) )
                 	__POINTW2MN _0x19,0
00014d 940e 03f8 	CALL _lcd_puts
                 ; 0000 004C     }
                 ; 0000 004D         else if(total_number==2)
00014f c09a      	RJMP _0x1A
                 _0x18:
000150 e0e2      	LDI  R30,LOW(2)
000151 e0f0      	LDI  R31,HIGH(2)
000152 15e4      	CP   R30,R4
000153 05f5      	CPC  R31,R5
000154 f491      	BRNE _0x1B
                 ; 0000 004E         {
                 ; 0000 004F             y12=y;
000155 81e8      	LD   R30,Y
000156 81f9      	LDD  R31,Y+1
000157 93e0 0274 	STS  _y12,R30
000159 93f0 0275 	STS  _y12+1,R31
                 ; 0000 0050             total_number++;
00015b 01f2      	MOVW R30,R4
00015c 9631      	ADIW R30,1
00015d 012f      	MOVW R4,R30
                 ; 0000 0051             b = y ;
                +
00015e 8088     +LDD R8 , Y + 0
00015f 8099     +LDD R9 , Y + 0 + 1
                 	__GETWRS 8,9,0
                 ; 0000 0052             lcd_clear();
000160 940e 03ca 	CALL _lcd_clear
                 ; 0000 0053             lcd_puts("**");
                +
000162 e6a2     +LDI R26 , LOW ( _0x19 + ( 2 ) )
000163 e0b2     +LDI R27 , HIGH ( _0x19 + ( 2 ) )
                 	__POINTW2MN _0x19,2
000164 940e 03f8 	CALL _lcd_puts
                 ; 0000 0054         }
                 ; 0000 0055         else if(total_number==3)
000166 c083      	RJMP _0x1C
                 _0x1B:
000167 e0e3      	LDI  R30,LOW(3)
000168 e0f0      	LDI  R31,HIGH(3)
000169 15e4      	CP   R30,R4
00016a 05f5      	CPC  R31,R5
00016b f491      	BRNE _0x1D
                 ; 0000 0056         {
                 ; 0000 0057             y13=y;
00016c 81e8      	LD   R30,Y
00016d 81f9      	LDD  R31,Y+1
00016e 93e0 0276 	STS  _y13,R30
000170 93f0 0277 	STS  _y13+1,R31
                 ; 0000 0058             total_number++;
000172 01f2      	MOVW R30,R4
000173 9631      	ADIW R30,1
000174 012f      	MOVW R4,R30
                 ; 0000 0059             c = y ;
                +
000175 80a8     +LDD R10 , Y + 0
000176 80b9     +LDD R11 , Y + 0 + 1
                 	__GETWRS 10,11,0
                 ; 0000 005A             lcd_clear();
000177 940e 03ca 	CALL _lcd_clear
                 ; 0000 005B             lcd_puts("***");
                +
000179 e6a5     +LDI R26 , LOW ( _0x19 + ( 5 ) )
00017a e0b2     +LDI R27 , HIGH ( _0x19 + ( 5 ) )
                 	__POINTW2MN _0x19,5
00017b 940e 03f8 	CALL _lcd_puts
                 ; 0000 005C         }
                 ; 0000 005D         else if(total_number==4)
00017d c06c      	RJMP _0x1E
                 _0x1D:
00017e e0e4      	LDI  R30,LOW(4)
00017f e0f0      	LDI  R31,HIGH(4)
000180 15e4      	CP   R30,R4
000181 05f5      	CPC  R31,R5
000182 f009      	BREQ PC+2
000183 c066      	RJMP _0x1F
                 ; 0000 005E         {
                 ; 0000 005F             y14=y;
000184 81e8      	LD   R30,Y
000185 81f9      	LDD  R31,Y+1
000186 93e0 0278 	STS  _y14,R30
000188 93f0 0279 	STS  _y14+1,R31
                 ; 0000 0060             total_number=1;
00018a e0e1      	LDI  R30,LOW(1)
00018b e0f0      	LDI  R31,HIGH(1)
00018c 012f      	MOVW R4,R30
                 ; 0000 0061             d = y ;
                +
00018d 80c8     +LDD R12 , Y + 0
00018e 80d9     +LDD R13 , Y + 0 + 1
                 	__GETWRS 12,13,0
                 ; 0000 0062             lcd_clear();
00018f 940e 03ca 	CALL _lcd_clear
                 ; 0000 0063             lcd_puts("****");
                +
000191 e6a9     +LDI R26 , LOW ( _0x19 + ( 9 ) )
000192 e0b2     +LDI R27 , HIGH ( _0x19 + ( 9 ) )
                 	__POINTW2MN _0x19,9
000193 940e 0448 	CALL SUBOPT_0x0
                 ; 0000 0064             delay_ms(1000);
                 ; 0000 0065             lcd_clear();
                 ; 0000 0066             itoa( a , password ) ; lcd_puts(password);
000195 927a      	ST   -Y,R7
000196 926a      	ST   -Y,R6
000197 940e 0450 	CALL SUBOPT_0x1
                 ; 0000 0067             itoa( b , password ) ; lcd_puts(password);
000199 929a      	ST   -Y,R9
00019a 928a      	ST   -Y,R8
00019b 940e 0450 	CALL SUBOPT_0x1
                 ; 0000 0068             itoa( c , password ) ; lcd_puts(password);
00019d 92ba      	ST   -Y,R11
00019e 92aa      	ST   -Y,R10
00019f 940e 0450 	CALL SUBOPT_0x1
                 ; 0000 0069             itoa( d , password ) ; lcd_puts(password);
0001a1 92da      	ST   -Y,R13
0001a2 92ca      	ST   -Y,R12
0001a3 e6ae      	LDI  R26,LOW(_password)
0001a4 e0b2      	LDI  R27,HIGH(_password)
0001a5 940e 036b 	CALL _itoa
0001a7 e6ae      	LDI  R26,LOW(_password)
0001a8 e0b2      	LDI  R27,HIGH(_password)
0001a9 940e 0448 	CALL SUBOPT_0x0
                 ; 0000 006A             delay_ms(1000);
                 ; 0000 006B             lcd_clear();
                 ; 0000 006C             y15=y11*1000+y12*100+y13*10+y14;
0001ab 91e0 0272 	LDS  R30,_y11
0001ad 91f0 0273 	LDS  R31,_y11+1
0001af 940e 0458 	CALL SUBOPT_0x2
0001b1 91e0 0274 	LDS  R30,_y12
0001b3 91f0 0275 	LDS  R31,_y12+1
0001b5 940e 045e 	CALL SUBOPT_0x3
0001b7 91e0 0276 	LDS  R30,_y13
0001b9 91f0 0277 	LDS  R31,_y13+1
0001bb 940e 0465 	CALL SUBOPT_0x4
0001bd 91a0 0278 	LDS  R26,_y14
0001bf 91b0 0279 	LDS  R27,_y14+1
0001c1 0fea      	ADD  R30,R26
0001c2 1ffb      	ADC  R31,R27
0001c3 93e0 027a 	STS  _y15,R30
0001c5 93f0 027b 	STS  _y15+1,R31
                 ; 0000 006D             if(y15==my_password)
0001c7 91e0 027c 	LDS  R30,_my_password
0001c9 91f0 027d 	LDS  R31,_my_password+1
0001cb 91a0 027a 	LDS  R26,_y15
0001cd 91b0 027b 	LDS  R27,_y15+1
0001cf 17ea      	CP   R30,R26
0001d0 07fb      	CPC  R31,R27
0001d1 f461      	BRNE _0x20
                 ; 0000 006E             {
                 ; 0000 006F                 lcd_gotoxy(0,0);
0001d2 940e 046c 	CALL SUBOPT_0x5
                 ; 0000 0070                 lcd_putsf("your pass is");
                 ; 0000 0071                 lcd_gotoxy(0,1);
                 ; 0000 0072                 lcd_putsf("      correct");
                +
0001d4 e9a1     +LDI R26 , LOW ( 2 * _0x0 + ( 27 ) )
0001d5 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 27 ) )
                 	__POINTW2FN _0x0,27
0001d6 940e 047a 	CALL SUBOPT_0x6
                 ; 0000 0073                 delay_ms(1000);
                 ; 0000 0074                 lcd_clear();
                 ; 0000 0075                 lcd_putsf("open!");
                +
0001d8 e9af     +LDI R26 , LOW ( 2 * _0x0 + ( 41 ) )
0001d9 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 41 ) )
                 	__POINTW2FN _0x0,41
0001da 940e 0407 	CALL _lcd_putsf
                 ; 0000 0076                 PORTC.0 = 0;
0001dc 98a8      	CBI  0x15,0
                 ; 0000 0077                 delay_ms(1000);
0001dd c006      	RJMP _0x4B
                 ; 0000 0078                 lcd_clear();
                 ; 0000 0079             }
                 ; 0000 007A             else
                 _0x20:
                 ; 0000 007B             {
                 ; 0000 007C                 lcd_gotoxy(0,0);
0001de 940e 046c 	CALL SUBOPT_0x5
                 ; 0000 007D                 lcd_putsf("your pass is");
                 ; 0000 007E                 lcd_gotoxy(0,1);
                 ; 0000 007F                 lcd_putsf("    incorrect");
                +
0001e0 eaa5     +LDI R26 , LOW ( 2 * _0x0 + ( 47 ) )
0001e1 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 47 ) )
                 	__POINTW2FN _0x0,47
0001e2 940e 0407 	CALL _lcd_putsf
                 ; 0000 0080                 delay_ms(1000);
                 _0x4B:
0001e4 eea8      	LDI  R26,LOW(1000)
0001e5 e0b3      	LDI  R27,HIGH(1000)
0001e6 940e 04ca 	CALL _delay_ms
                 ; 0000 0081                 lcd_clear();
0001e8 940e 03ca 	CALL _lcd_clear
                 ; 0000 0082             }
                 ; 0000 0083         };
                 _0x1F:
                 _0x1E:
                 _0x1C:
                 _0x1A:
                 ; 0000 0084 }
0001ea 940c 03c8 	JMP  _0x20A0003
                 ; .FEND
                 
                 	.DSEG
                 _0x19:
000260           	.BYTE 0xE
                 ;void main(void)
                 ; 0000 0086 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0087 // Declare your local variables here
                 ; 0000 0088      int y;
                 ; 0000 0089      int y1,y2,y3,y4,y5;
                 ; 0000 008A      int i=1;
                 ; 0000 008B      char aray[];
                 ; 0000 008C      int y6,y7,y8,y9,y10;
                 ; 0000 008D // Input/Output Ports initialization
                 ; 0000 008E // Port A initialization
                 ; 0000 008F // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0090 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0001ec 9762      	SBIW R28,18
0001ed e0e1      	LDI  R30,LOW(1)
0001ee 87ea      	STD  Y+10,R30
0001ef e0e0      	LDI  R30,LOW(0)
0001f0 87eb      	STD  Y+11,R30
                 ;	y -> R16,R17
                 ;	y1 -> R18,R19
                 ;	y2 -> R20,R21
                 ;	y3 -> Y+16
                 ;	y4 -> Y+14
                 ;	y5 -> Y+12
                 ;	i -> Y+10
                 ;	aray -> Y+10
                 ;	y6 -> Y+8
                 ;	y7 -> Y+6
                 ;	y8 -> Y+4
                 ;	y9 -> Y+2
                 ;	y10 -> Y+0
0001f1 bbea      	OUT  0x1A,R30
                 ; 0000 0091 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0092 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0001f2 bbeb      	OUT  0x1B,R30
                 ; 0000 0093 
                 ; 0000 0094 // Port B initialization
                 ; 0000 0095 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0096 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0001f3 bbe7      	OUT  0x17,R30
                 ; 0000 0097 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0098 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0001f4 bbe8      	OUT  0x18,R30
                 ; 0000 0099 
                 ; 0000 009A // Port C initialization
                 ; 0000 009B // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=Out
                 ; 0000 009C DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (1<<DDC0);
0001f5 e0e1      	LDI  R30,LOW(1)
0001f6 bbe4      	OUT  0x14,R30
                 ; 0000 009D // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=0
                 ; 0000 009E PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0001f7 e0e0      	LDI  R30,LOW(0)
0001f8 bbe5      	OUT  0x15,R30
                 ; 0000 009F 
                 ; 0000 00A0 // Port D initialization
                 ; 0000 00A1 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00A2 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0001f9 e0ef      	LDI  R30,LOW(15)
0001fa bbe1      	OUT  0x11,R30
                 ; 0000 00A3 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 00A4 PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0001fb efe0      	LDI  R30,LOW(240)
0001fc bbe2      	OUT  0x12,R30
                 ; 0000 00A5 
                 ; 0000 00A6 // Alphanumeric LCD initialization
                 ; 0000 00A7 // Connections are specified in the
                 ; 0000 00A8 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00A9 // RS - PORTA Bit 0
                 ; 0000 00AA // RD - PORTA Bit 1
                 ; 0000 00AB // EN - PORTA Bit 2
                 ; 0000 00AC // D4 - PORTA Bit 4
                 ; 0000 00AD // D5 - PORTA Bit 5
                 ; 0000 00AE // D6 - PORTA Bit 6
                 ; 0000 00AF // D7 - PORTA Bit 7
                 ; 0000 00B0 // Characters/line: 16
                 ; 0000 00B1 lcd_init(16);
0001fd e1a0      	LDI  R26,LOW(16)
0001fe 940e 041a 	CALL _lcd_init
                 ; 0000 00B2 PORTC.0 = 1;
000200 9aa8      	SBI  0x15,0
                 ; 0000 00B3 lcd_putsf("enter password");
                +
000201 eba3     +LDI R26 , LOW ( 2 * _0x0 + ( 61 ) )
000202 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 61 ) )
                 	__POINTW2FN _0x0,61
000203 940e 0407 	CALL _lcd_putsf
                 ; 0000 00B4 
                 ; 0000 00B5 while (1)
                 _0x26:
                 ; 0000 00B6       {
                 ; 0000 00B7       // Place your code here
                 ; 0000 00B8         y = key();
000205 dee4      	RCALL _key
000206 018f      	MOVW R16,R30
                 ; 0000 00B9         if(y == 10){i++;delay_ms(100);}
000207 e0ea      	LDI  R30,LOW(10)
000208 e0f0      	LDI  R31,HIGH(10)
000209 17e0      	CP   R30,R16
00020a 07f1      	CPC  R31,R17
00020b f449      	BRNE _0x29
00020c 85ea      	LDD  R30,Y+10
00020d 85fb      	LDD  R31,Y+10+1
00020e 9631      	ADIW R30,1
00020f 87ea      	STD  Y+10,R30
000210 87fb      	STD  Y+10+1,R31
000211 e6a4      	LDI  R26,LOW(100)
000212 e0b0      	LDI  R27,0
000213 940e 04ca 	CALL _delay_ms
                 ; 0000 00BA         up2:
                 _0x29:
                 _0x2A:
                 ; 0000 00BB         while(i%4==0)
                 _0x2B:
000215 85aa      	LDD  R26,Y+10
000216 85bb      	LDD  R27,Y+10+1
000217 e0e4      	LDI  R30,LOW(4)
000218 e0f0      	LDI  R31,HIGH(4)
000219 940e 04fe 	CALL __MODW21
00021b 9730      	SBIW R30,0
00021c f009      	BREQ PC+2
00021d c0e7      	RJMP _0x2D
                 ; 0000 00BC         {
                 ; 0000 00BD             lcd_clear();
00021e 940e 03ca 	CALL _lcd_clear
                 ; 0000 00BE             lcd_putsf("reset pass");
                +
000220 eca2     +LDI R26 , LOW ( 2 * _0x0 + ( 76 ) )
000221 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 76 ) )
                 	__POINTW2FN _0x0,76
000222 940e 047a 	CALL SUBOPT_0x6
                 ; 0000 00BF             delay_ms(1000);
                 ; 0000 00C0             lcd_clear();
                 ; 0000 00C1             lcd_gotoxy(0,0);
000224 940e 0482 	CALL SUBOPT_0x7
                 ; 0000 00C2             up:
                 _0x2E:
                 ; 0000 00C3             lcd_putsf("enter old pass:");
                +
000226 ecad     +LDI R26 , LOW ( 2 * _0x0 + ( 87 ) )
000227 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 87 ) )
                 	__POINTW2FN _0x0,87
000228 940e 0487 	CALL SUBOPT_0x8
                 ; 0000 00C4             lcd_gotoxy(0,1);
                 ; 0000 00C5 
                 ; 0000 00C6             y1=key();if(y1==10){i=0;goto up2;}itoa(y1,aray);lcd_puts(aray);delay_ms(200);
00022a 019f      	MOVW R18,R30
00022b e0ea      	LDI  R30,LOW(10)
00022c e0f0      	LDI  R31,HIGH(10)
00022d 17e2      	CP   R30,R18
00022e 07f3      	CPC  R31,R19
00022f f421      	BRNE _0x2F
000230 e0e0      	LDI  R30,LOW(0)
000231 87ea      	STD  Y+10,R30
000232 87eb      	STD  Y+10+1,R30
000233 cfe1      	RJMP _0x2A
                 _0x2F:
000234 933a      	ST   -Y,R19
000235 932a      	ST   -Y,R18
000236 940e 0490 	CALL SUBOPT_0x9
                 ; 0000 00C7             y2=key();if(y2==10){i=0;goto up2;}itoa(y2,aray);lcd_puts(aray);delay_ms(200);
000238 01af      	MOVW R20,R30
000239 e0ea      	LDI  R30,LOW(10)
00023a e0f0      	LDI  R31,HIGH(10)
00023b 17e4      	CP   R30,R20
00023c 07f5      	CPC  R31,R21
00023d f421      	BRNE _0x30
00023e e0e0      	LDI  R30,LOW(0)
00023f 87ea      	STD  Y+10,R30
000240 87eb      	STD  Y+10+1,R30
000241 cfd3      	RJMP _0x2A
                 _0x30:
000242 935a      	ST   -Y,R21
000243 934a      	ST   -Y,R20
000244 940e 0490 	CALL SUBOPT_0x9
                 ; 0000 00C8             y3=key();if(y3==10){i=0;goto up2;}itoa(y3,aray);lcd_puts(aray);delay_ms(200);
000246 8be8      	STD  Y+16,R30
000247 8bf9      	STD  Y+16+1,R31
000248 89a8      	LDD  R26,Y+16
000249 89b9      	LDD  R27,Y+16+1
00024a 971a      	SBIW R26,10
00024b f421      	BRNE _0x31
00024c e0e0      	LDI  R30,LOW(0)
00024d 87ea      	STD  Y+10,R30
00024e 87eb      	STD  Y+10+1,R30
00024f cfc5      	RJMP _0x2A
                 _0x31:
000250 89e8      	LDD  R30,Y+16
000251 89f9      	LDD  R31,Y+16+1
000252 940e 049e 	CALL SUBOPT_0xA
                 ; 0000 00C9             y4=key();if(y4==10){i=0;goto up2;}itoa(y4,aray);lcd_puts(aray);delay_ms(200);
000254 87ee      	STD  Y+14,R30
000255 87ff      	STD  Y+14+1,R31
000256 85ae      	LDD  R26,Y+14
000257 85bf      	LDD  R27,Y+14+1
000258 971a      	SBIW R26,10
000259 f421      	BRNE _0x32
00025a e0e0      	LDI  R30,LOW(0)
00025b 87ea      	STD  Y+10,R30
00025c 87eb      	STD  Y+10+1,R30
00025d cfb7      	RJMP _0x2A
                 _0x32:
00025e 85ee      	LDD  R30,Y+14
00025f 85ff      	LDD  R31,Y+14+1
000260 940e 04a1 	CALL SUBOPT_0xB
                 ; 0000 00CA             y5=y1*1000+y2*100+y3*10+y4;
000262 01f9      	MOVW R30,R18
000263 940e 0458 	CALL SUBOPT_0x2
000265 01fa      	MOVW R30,R20
000266 940e 045e 	CALL SUBOPT_0x3
000268 89e8      	LDD  R30,Y+16
000269 89f9      	LDD  R31,Y+16+1
00026a 940e 0465 	CALL SUBOPT_0x4
00026c 85ae      	LDD  R26,Y+14
00026d 85bf      	LDD  R27,Y+14+1
00026e 0fea      	ADD  R30,R26
00026f 1ffb      	ADC  R31,R27
000270 87ec      	STD  Y+12,R30
000271 87fd      	STD  Y+12+1,R31
                 ; 0000 00CB 
                 ; 0000 00CC             if(y5==my_password)
000272 91e0 027c 	LDS  R30,_my_password
000274 91f0 027d 	LDS  R31,_my_password+1
000276 85ac      	LDD  R26,Y+12
000277 85bd      	LDD  R27,Y+12+1
000278 17ea      	CP   R30,R26
000279 07fb      	CPC  R31,R27
00027a f009      	BREQ PC+2
00027b c077      	RJMP _0x33
                 ; 0000 00CD             {
                 ; 0000 00CE                 lcd_clear();
00027c 940e 03ca 	CALL _lcd_clear
                 ; 0000 00CF                 lcd_gotoxy(0,0);
00027e 940e 0482 	CALL SUBOPT_0x7
                 ; 0000 00D0                 lcd_putsf("pass correct");
                +
000280 edad     +LDI R26 , LOW ( 2 * _0x0 + ( 103 ) )
000281 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 103 ) )
                 	__POINTW2FN _0x0,103
000282 940e 047a 	CALL SUBOPT_0x6
                 ; 0000 00D1                 delay_ms(1000);
                 ; 0000 00D2                 lcd_clear();
                 ; 0000 00D3                 lcd_gotoxy(0,0);
000284 940e 0482 	CALL SUBOPT_0x7
                 ; 0000 00D4                 lcd_putsf("enter new pass :");
                +
000286 eeaa     +LDI R26 , LOW ( 2 * _0x0 + ( 116 ) )
000287 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 116 ) )
                 	__POINTW2FN _0x0,116
000288 940e 0487 	CALL SUBOPT_0x8
                 ; 0000 00D5                 lcd_gotoxy(0,1);
                 ; 0000 00D6 
                 ; 0000 00D7                 y6=key();if(y6==10){i=0;goto up2;}itoa(y6,aray);lcd_puts(aray);delay_ms(200);
00028a 87e8      	STD  Y+8,R30
00028b 87f9      	STD  Y+8+1,R31
00028c 85a8      	LDD  R26,Y+8
00028d 85b9      	LDD  R27,Y+8+1
00028e 971a      	SBIW R26,10
00028f f421      	BRNE _0x34
000290 e0e0      	LDI  R30,LOW(0)
000291 87ea      	STD  Y+10,R30
000292 87eb      	STD  Y+10+1,R30
000293 cf81      	RJMP _0x2A
                 _0x34:
000294 85e8      	LDD  R30,Y+8
000295 85f9      	LDD  R31,Y+8+1
000296 940e 049e 	CALL SUBOPT_0xA
                 ; 0000 00D8                 y7=key();if(y7==10){i=0;goto up2;}itoa(y7,aray);lcd_puts(aray);delay_ms(200);
000298 83ee      	STD  Y+6,R30
000299 83ff      	STD  Y+6+1,R31
00029a 81ae      	LDD  R26,Y+6
00029b 81bf      	LDD  R27,Y+6+1
00029c 971a      	SBIW R26,10
00029d f421      	BRNE _0x35
00029e e0e0      	LDI  R30,LOW(0)
00029f 87ea      	STD  Y+10,R30
0002a0 87eb      	STD  Y+10+1,R30
0002a1 cf73      	RJMP _0x2A
                 _0x35:
0002a2 81ee      	LDD  R30,Y+6
0002a3 81ff      	LDD  R31,Y+6+1
0002a4 940e 049e 	CALL SUBOPT_0xA
                 ; 0000 00D9                 y8=key();if(y8==10){i=0;goto up2;}itoa(y8,aray);lcd_puts(aray);delay_ms(200);
0002a6 83ec      	STD  Y+4,R30
0002a7 83fd      	STD  Y+4+1,R31
0002a8 81ac      	LDD  R26,Y+4
0002a9 81bd      	LDD  R27,Y+4+1
0002aa 971a      	SBIW R26,10
0002ab f421      	BRNE _0x36
0002ac e0e0      	LDI  R30,LOW(0)
0002ad 87ea      	STD  Y+10,R30
0002ae 87eb      	STD  Y+10+1,R30
0002af cf65      	RJMP _0x2A
                 _0x36:
0002b0 81ec      	LDD  R30,Y+4
0002b1 81fd      	LDD  R31,Y+4+1
0002b2 940e 049e 	CALL SUBOPT_0xA
                 ; 0000 00DA                 y9=key();if(y9==10){i=0;goto up2;}itoa(y9,aray);lcd_puts(aray);delay_ms(200);
0002b4 83ea      	STD  Y+2,R30
0002b5 83fb      	STD  Y+2+1,R31
0002b6 81aa      	LDD  R26,Y+2
0002b7 81bb      	LDD  R27,Y+2+1
0002b8 971a      	SBIW R26,10
0002b9 f421      	BRNE _0x37
0002ba e0e0      	LDI  R30,LOW(0)
0002bb 87ea      	STD  Y+10,R30
0002bc 87eb      	STD  Y+10+1,R30
0002bd cf57      	RJMP _0x2A
                 _0x37:
0002be 81ea      	LDD  R30,Y+2
0002bf 81fb      	LDD  R31,Y+2+1
0002c0 940e 04a1 	CALL SUBOPT_0xB
                 ; 0000 00DB                 y10=y6*1000+y7*100+y8*10+y9;
0002c2 85e8      	LDD  R30,Y+8
0002c3 85f9      	LDD  R31,Y+8+1
0002c4 940e 0458 	CALL SUBOPT_0x2
0002c6 81ee      	LDD  R30,Y+6
0002c7 81ff      	LDD  R31,Y+6+1
0002c8 940e 045e 	CALL SUBOPT_0x3
0002ca 81ec      	LDD  R30,Y+4
0002cb 81fd      	LDD  R31,Y+4+1
0002cc 940e 0465 	CALL SUBOPT_0x4
0002ce 81aa      	LDD  R26,Y+2
0002cf 81bb      	LDD  R27,Y+2+1
0002d0 0fea      	ADD  R30,R26
0002d1 1ffb      	ADC  R31,R27
0002d2 83e8      	ST   Y,R30
0002d3 83f9      	STD  Y+1,R31
                 ; 0000 00DC                 my_password=y10;
0002d4 93e0 027c 	STS  _my_password,R30
0002d6 93f0 027d 	STS  _my_password+1,R31
                 ; 0000 00DD                 lcd_clear();
0002d8 940e 03ca 	CALL _lcd_clear
                 ; 0000 00DE                 lcd_gotoxy(0,0);lcd_putsf("new pass is : ");
0002da 940e 0482 	CALL SUBOPT_0x7
                +
0002dc efab     +LDI R26 , LOW ( 2 * _0x0 + ( 133 ) )
0002dd e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 133 ) )
                 	__POINTW2FN _0x0,133
0002de 940e 0407 	CALL _lcd_putsf
                 ; 0000 00DF                 lcd_gotoxy(0,1);itoa(y10,aray);lcd_puts(aray);delay_ms(1000);
0002e0 940e 04af 	CALL SUBOPT_0xC
0002e2 81e8      	LD   R30,Y
0002e3 81f9      	LDD  R31,Y+1
0002e4 93fa      	ST   -Y,R31
0002e5 93ea      	ST   -Y,R30
0002e6 01de      	MOVW R26,R28
0002e7 961c      	ADIW R26,12
0002e8 940e 036b 	CALL _itoa
0002ea 01de      	MOVW R26,R28
0002eb 961a      	ADIW R26,10
0002ec 940e 0448 	CALL SUBOPT_0x0
                 ; 0000 00E0                 lcd_clear();
                 ; 0000 00E1                 i=1;
0002ee e0e1      	LDI  R30,LOW(1)
0002ef e0f0      	LDI  R31,HIGH(1)
0002f0 87ea      	STD  Y+10,R30
0002f1 87fb      	STD  Y+10+1,R31
                 ; 0000 00E2             }
                 ; 0000 00E3             else
0002f2 c011      	RJMP _0x38
                 _0x33:
                 ; 0000 00E4             {
                 ; 0000 00E5                 lcd_gotoxy(0,0);
0002f3 940e 0482 	CALL SUBOPT_0x7
                 ; 0000 00E6                 lcd_putsf("pass incorrect");
                +
0002f5 e0aa     +LDI R26 , LOW ( 2 * _0x0 + ( 148 ) )
0002f6 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 148 ) )
                 	__POINTW2FN _0x0,148
0002f7 940e 0407 	CALL _lcd_putsf
                 ; 0000 00E7                 delay_ms(1000);
0002f9 eea8      	LDI  R26,LOW(1000)
0002fa e0b3      	LDI  R27,HIGH(1000)
0002fb 940e 04ca 	CALL _delay_ms
                 ; 0000 00E8                 lcd_gotoxy(0,1);
0002fd 940e 04af 	CALL SUBOPT_0xC
                 ; 0000 00E9                 lcd_putsf("please repeat");
                +
0002ff e1a9     +LDI R26 , LOW ( 2 * _0x0 + ( 163 ) )
000300 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 163 ) )
                 	__POINTW2FN _0x0,163
000301 940e 047a 	CALL SUBOPT_0x6
                 ; 0000 00EA                 delay_ms(1000);
                 ; 0000 00EB                 lcd_clear();
                 ; 0000 00EC                 goto up;
000303 cf22      	RJMP _0x2E
                 ; 0000 00ED             }
                 _0x38:
                 ; 0000 00EE       }
000304 cf10      	RJMP _0x2B
                 _0x2D:
                 ; 0000 00EF 
                 ; 0000 00F0         switch(y){
000305 01f8      	MOVW R30,R16
                 ; 0000 00F1          case 11:   {lcd_gotoxy(0,1);lcd_putsf("Close !");PORTC.0 = 1;
000306 30eb      	CPI  R30,LOW(0xB)
000307 e0a0      	LDI  R26,HIGH(0xB)
000308 07fa      	CPC  R31,R26
000309 f491      	BRNE _0x3C
00030a 940e 04af 	CALL SUBOPT_0xC
                +
00030c e2a7     +LDI R26 , LOW ( 2 * _0x0 + ( 177 ) )
00030d e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 177 ) )
                 	__POINTW2FN _0x0,177
00030e 940e 0407 	CALL _lcd_putsf
000310 9aa8      	SBI  0x15,0
                 ; 0000 00F2              delay_ms(1000);lcd_clear();lcd_putsf("Enter Password:"); }
000311 eea8      	LDI  R26,LOW(1000)
000312 e0b3      	LDI  R27,HIGH(1000)
000313 940e 04ca 	CALL _delay_ms
000315 940e 03ca 	CALL _lcd_clear
                +
000317 e2af     +LDI R26 , LOW ( 2 * _0x0 + ( 185 ) )
000318 e0b1     +LDI R27 , HIGH ( 2 * _0x0 + ( 185 ) )
                 	__POINTW2FN _0x0,185
000319 940e 0407 	CALL _lcd_putsf
                 ; 0000 00F3              break;
00031b c04d      	RJMP _0x3B
                 ; 0000 00F4          case 0:
                 _0x3C:
00031c 9730      	SBIW R30,0
00031d f421      	BRNE _0x3F
                 ; 0000 00F5              lcd_putchar('0');  delay_ms(50);   amaliat(y);break;
00031e e3a0      	LDI  R26,LOW(48)
00031f 940e 04b4 	CALL SUBOPT_0xD
000321 c047      	RJMP _0x3B
                 ; 0000 00F6          case 1:
                 _0x3F:
000322 30e1      	CPI  R30,LOW(0x1)
000323 e0a0      	LDI  R26,HIGH(0x1)
000324 07fa      	CPC  R31,R26
000325 f421      	BRNE _0x40
                 ; 0000 00F7              lcd_putchar('1');  delay_ms(50);   amaliat(y);break;
000326 e3a1      	LDI  R26,LOW(49)
000327 940e 04b4 	CALL SUBOPT_0xD
000329 c03f      	RJMP _0x3B
                 ; 0000 00F8          case 2:
                 _0x40:
00032a 30e2      	CPI  R30,LOW(0x2)
00032b e0a0      	LDI  R26,HIGH(0x2)
00032c 07fa      	CPC  R31,R26
00032d f421      	BRNE _0x41
                 ; 0000 00F9              lcd_putchar('2');  delay_ms(50);   amaliat(y);break;
00032e e3a2      	LDI  R26,LOW(50)
00032f 940e 04b4 	CALL SUBOPT_0xD
000331 c037      	RJMP _0x3B
                 ; 0000 00FA          case 3:
                 _0x41:
000332 30e3      	CPI  R30,LOW(0x3)
000333 e0a0      	LDI  R26,HIGH(0x3)
000334 07fa      	CPC  R31,R26
000335 f421      	BRNE _0x42
                 ; 0000 00FB              lcd_putchar('3');  delay_ms(50);   amaliat(y);break;
000336 e3a3      	LDI  R26,LOW(51)
000337 940e 04b4 	CALL SUBOPT_0xD
000339 c02f      	RJMP _0x3B
                 ; 0000 00FC          case 4:
                 _0x42:
00033a 30e4      	CPI  R30,LOW(0x4)
00033b e0a0      	LDI  R26,HIGH(0x4)
00033c 07fa      	CPC  R31,R26
00033d f421      	BRNE _0x43
                 ; 0000 00FD              lcd_putchar('4');  delay_ms(50);   amaliat(y);break;
00033e e3a4      	LDI  R26,LOW(52)
00033f 940e 04b4 	CALL SUBOPT_0xD
000341 c027      	RJMP _0x3B
                 ; 0000 00FE          case 5:
                 _0x43:
000342 30e5      	CPI  R30,LOW(0x5)
000343 e0a0      	LDI  R26,HIGH(0x5)
000344 07fa      	CPC  R31,R26
000345 f421      	BRNE _0x44
                 ; 0000 00FF              lcd_putchar('5');  delay_ms(50);   amaliat(y);break;
000346 e3a5      	LDI  R26,LOW(53)
000347 940e 04b4 	CALL SUBOPT_0xD
000349 c01f      	RJMP _0x3B
                 ; 0000 0100          case 6:
                 _0x44:
00034a 30e6      	CPI  R30,LOW(0x6)
00034b e0a0      	LDI  R26,HIGH(0x6)
00034c 07fa      	CPC  R31,R26
00034d f421      	BRNE _0x45
                 ; 0000 0101              lcd_putchar('6');  delay_ms(50);   amaliat(y);break;
00034e e3a6      	LDI  R26,LOW(54)
00034f 940e 04b4 	CALL SUBOPT_0xD
000351 c017      	RJMP _0x3B
                 ; 0000 0102          case 7:
                 _0x45:
000352 30e7      	CPI  R30,LOW(0x7)
000353 e0a0      	LDI  R26,HIGH(0x7)
000354 07fa      	CPC  R31,R26
000355 f421      	BRNE _0x46
                 ; 0000 0103              lcd_putchar('7');  delay_ms(50);   amaliat(y);break;
000356 e3a7      	LDI  R26,LOW(55)
000357 940e 04b4 	CALL SUBOPT_0xD
000359 c00f      	RJMP _0x3B
                 ; 0000 0104          case 8:
                 _0x46:
00035a 30e8      	CPI  R30,LOW(0x8)
00035b e0a0      	LDI  R26,HIGH(0x8)
00035c 07fa      	CPC  R31,R26
00035d f421      	BRNE _0x47
                 ; 0000 0105              lcd_putchar('8');  delay_ms(50);   amaliat(y);break;
00035e e3a8      	LDI  R26,LOW(56)
00035f 940e 04b4 	CALL SUBOPT_0xD
000361 c007      	RJMP _0x3B
                 ; 0000 0106          case 9:
                 _0x47:
000362 30e9      	CPI  R30,LOW(0x9)
000363 e0a0      	LDI  R26,HIGH(0x9)
000364 07fa      	CPC  R31,R26
000365 f419      	BRNE _0x49
                 ; 0000 0107              lcd_putchar('9');  delay_ms(50);   amaliat(y);break;
000366 e3a9      	LDI  R26,LOW(57)
000367 940e 04b4 	CALL SUBOPT_0xD
                 ; 0000 0108          default:
                 _0x49:
                 ; 0000 0109             break;
                 ; 0000 010A      }
                 _0x3B:
                 ; 0000 010B   }
000369 ce9b      	RJMP _0x26
                 ; 0000 010C }
                 _0x4A:
00036a cfff      	RJMP _0x4A
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
00036b 93ba      	ST   -Y,R27
00036c 93aa      	ST   -Y,R26
00036d 91a9          ld   r26,y+
00036e 91b9          ld   r27,y+
00036f 91e9          ld   r30,y+
000370 91f9          ld   r31,y+
000371 9630          adiw r30,0
000372 f42a          brpl __itoa0
000373 95e0          com  r30
000374 95f0          com  r31
000375 9631          adiw r30,1
000376 e26d          ldi  r22,'-'
000377 936d          st   x+,r22
                 __itoa0:
000378 94e8          clt
000379 e180          ldi  r24,low(10000)
00037a e297          ldi  r25,high(10000)
00037b d00d          rcall __itoa1
00037c ee88          ldi  r24,low(1000)
00037d e093          ldi  r25,high(1000)
00037e d00a          rcall __itoa1
00037f e684          ldi  r24,100
000380 2799          clr  r25
000381 d007          rcall __itoa1
000382 e08a          ldi  r24,10
000383 d005          rcall __itoa1
000384 2f6e          mov  r22,r30
000385 d010          rcall __itoa5
000386 2766          clr  r22
000387 936c          st   x,r22
000388 9508          ret
                 
                 __itoa1:
000389 2766          clr	 r22
                 __itoa2:
00038a 17e8          cp   r30,r24
00038b 07f9          cpc  r31,r25
00038c f020          brlo __itoa3
00038d 9563          inc  r22
00038e 1be8          sub  r30,r24
00038f 0bf9          sbc  r31,r25
000390 f7c9          brne __itoa2
                 __itoa3:
000391 2366          tst  r22
000392 f411          brne __itoa4
000393 f016          brts __itoa5
000394 9508          ret
                 __itoa4:
000395 9468          set
                 __itoa5:
000396 5d60          subi r22,-0x30
000397 936d          st   x+,r22
000398 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000399 93aa      	ST   -Y,R26
00039a b3eb      	IN   R30,0x1B
00039b 70ef      	ANDI R30,LOW(0xF)
00039c 2fae      	MOV  R26,R30
00039d 81e8      	LD   R30,Y
00039e 7fe0      	ANDI R30,LOW(0xF0)
00039f 2bea      	OR   R30,R26
0003a0 bbeb      	OUT  0x1B,R30
                +
0003a1 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0003a2 958a     +DEC R24
0003a3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0003a4 9ada      	SBI  0x1B,2
                +
0003a5 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0003a6 958a     +DEC R24
0003a7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0003a8 98da      	CBI  0x1B,2
                +
0003a9 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0003aa 958a     +DEC R24
0003ab f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0003ac c099      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0003ad 93aa      	ST   -Y,R26
0003ae 81a8      	LD   R26,Y
0003af dfe9      	RCALL __lcd_write_nibble_G101
0003b0 81e8          ld    r30,y
0003b1 95e2          swap  r30
0003b2 83e8          st    y,r30
0003b3 81a8      	LD   R26,Y
0003b4 dfe4      	RCALL __lcd_write_nibble_G101
                +
0003b5 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0003b6 958a     +DEC R24
0003b7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0003b8 c08d      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0003b9 93aa      	ST   -Y,R26
0003ba 81e8      	LD   R30,Y
0003bb e0f0      	LDI  R31,0
0003bc 57ee      	SUBI R30,LOW(-__base_y_G101)
0003bd 4ffd      	SBCI R31,HIGH(-__base_y_G101)
0003be 81e0      	LD   R30,Z
0003bf 81a9      	LDD  R26,Y+1
0003c0 0fae      	ADD  R26,R30
0003c1 dfeb      	RCALL __lcd_write_data
0003c2 81e9      	LDD  R30,Y+1
0003c3 93e0 0286 	STS  __lcd_x,R30
0003c5 81e8      	LD   R30,Y
0003c6 93e0 0287 	STS  __lcd_y,R30
                 _0x20A0003:
0003c8 9622      	ADIW R28,2
0003c9 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0003ca e0a2      	LDI  R26,LOW(2)
0003cb 940e 04bd 	CALL SUBOPT_0xE
0003cd e0ac      	LDI  R26,LOW(12)
0003ce dfde      	RCALL __lcd_write_data
0003cf e0a1      	LDI  R26,LOW(1)
0003d0 940e 04bd 	CALL SUBOPT_0xE
0003d2 e0e0      	LDI  R30,LOW(0)
0003d3 93e0 0287 	STS  __lcd_y,R30
0003d5 93e0 0286 	STS  __lcd_x,R30
0003d7 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0003d8 93aa      	ST   -Y,R26
0003d9 81a8      	LD   R26,Y
0003da 30aa      	CPI  R26,LOW(0xA)
0003db f031      	BREQ _0x2020005
0003dc 91e0 0288 	LDS  R30,__lcd_maxx
0003de 91a0 0286 	LDS  R26,__lcd_x
0003e0 17ae      	CP   R26,R30
0003e1 f060      	BRLO _0x2020004
                 _0x2020005:
0003e2 e0e0      	LDI  R30,LOW(0)
0003e3 93ea      	ST   -Y,R30
0003e4 91a0 0287 	LDS  R26,__lcd_y
0003e6 5faf      	SUBI R26,-LOW(1)
0003e7 93a0 0287 	STS  __lcd_y,R26
0003e9 dfcf      	RCALL _lcd_gotoxy
0003ea 81a8      	LD   R26,Y
0003eb 30aa      	CPI  R26,LOW(0xA)
0003ec f409      	BRNE _0x2020007
0003ed c058      	RJMP _0x20A0001
                 _0x2020007:
                 _0x2020004:
0003ee 91e0 0286 	LDS  R30,__lcd_x
0003f0 5fef      	SUBI R30,-LOW(1)
0003f1 93e0 0286 	STS  __lcd_x,R30
0003f3 9ad8      	SBI  0x1B,0
0003f4 81a8      	LD   R26,Y
0003f5 dfb7      	RCALL __lcd_write_data
0003f6 98d8      	CBI  0x1B,0
0003f7 c04e      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0003f8 93ba      	ST   -Y,R27
0003f9 93aa      	ST   -Y,R26
0003fa 931a      	ST   -Y,R17
                 _0x2020008:
0003fb 81a9      	LDD  R26,Y+1
0003fc 81ba      	LDD  R27,Y+1+1
0003fd 91ed      	LD   R30,X+
0003fe 83a9      	STD  Y+1,R26
0003ff 83ba      	STD  Y+1+1,R27
000400 2f1e      	MOV  R17,R30
000401 30e0      	CPI  R30,0
000402 f019      	BREQ _0x202000A
000403 2fa1      	MOV  R26,R17
000404 dfd3      	RCALL _lcd_putchar
000405 cff5      	RJMP _0x2020008
                 _0x202000A:
000406 c010      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000407 93ba      	ST   -Y,R27
000408 93aa      	ST   -Y,R26
000409 931a      	ST   -Y,R17
                 _0x202000B:
00040a 81e9      	LDD  R30,Y+1
00040b 81fa      	LDD  R31,Y+1+1
00040c 9631      	ADIW R30,1
00040d 83e9      	STD  Y+1,R30
00040e 83fa      	STD  Y+1+1,R31
00040f 9731      	SBIW R30,1
000410 91e4      	LPM  R30,Z
000411 2f1e      	MOV  R17,R30
000412 30e0      	CPI  R30,0
000413 f019      	BREQ _0x202000D
000414 2fa1      	MOV  R26,R17
000415 dfc2      	RCALL _lcd_putchar
000416 cff3      	RJMP _0x202000B
                 _0x202000D:
                 _0x20A0002:
000417 8118      	LDD  R17,Y+0
000418 9623      	ADIW R28,3
000419 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00041a 93aa      	ST   -Y,R26
00041b b3ea      	IN   R30,0x1A
00041c 6fe0      	ORI  R30,LOW(0xF0)
00041d bbea      	OUT  0x1A,R30
00041e 9ad2      	SBI  0x1A,2
00041f 9ad0      	SBI  0x1A,0
000420 9ad1      	SBI  0x1A,1
000421 98da      	CBI  0x1B,2
000422 98d8      	CBI  0x1B,0
000423 98d9      	CBI  0x1B,1
000424 81e8      	LD   R30,Y
000425 93e0 0288 	STS  __lcd_maxx,R30
000427 58e0      	SUBI R30,-LOW(128)
                +
000428 93e0 0284+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
00042a 81e8      	LD   R30,Y
00042b 54e0      	SUBI R30,-LOW(192)
                +
00042c 93e0 0285+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
00042e e1a4      	LDI  R26,LOW(20)
00042f e0b0      	LDI  R27,0
000430 940e 04ca 	CALL _delay_ms
000432 940e 04c3 	CALL SUBOPT_0xF
000434 940e 04c3 	CALL SUBOPT_0xF
000436 940e 04c3 	CALL SUBOPT_0xF
000438 e2a0      	LDI  R26,LOW(32)
000439 df5f      	RCALL __lcd_write_nibble_G101
                +
00043a e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00043b 958a     +DEC R24
00043c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00043d e2a8      	LDI  R26,LOW(40)
00043e df6e      	RCALL __lcd_write_data
00043f e0a4      	LDI  R26,LOW(4)
000440 df6c      	RCALL __lcd_write_data
000441 e8a5      	LDI  R26,LOW(133)
000442 df6a      	RCALL __lcd_write_data
000443 e0a6      	LDI  R26,LOW(6)
000444 df68      	RCALL __lcd_write_data
000445 df84      	RCALL _lcd_clear
                 _0x20A0001:
000446 9621      	ADIW R28,1
000447 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _password:
00026e           	.BYTE 0x4
                 _y11:
000272           	.BYTE 0x2
                 _y12:
000274           	.BYTE 0x2
                 _y13:
000276           	.BYTE 0x2
                 _y14:
000278           	.BYTE 0x2
                 _y15:
00027a           	.BYTE 0x2
                 _my_password:
00027c           	.BYTE 0x2
                 __seed_G100:
00027e           	.BYTE 0x4
                 __base_y_G101:
000282           	.BYTE 0x4
                 __lcd_x:
000286           	.BYTE 0x1
                 __lcd_y:
000287           	.BYTE 0x1
                 __lcd_maxx:
000288           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
000448 940e 03f8 	CALL _lcd_puts
00044a eea8      	LDI  R26,LOW(1000)
00044b e0b3      	LDI  R27,HIGH(1000)
00044c 940e 04ca 	CALL _delay_ms
00044e 940c 03ca 	JMP  _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
000450 e6ae      	LDI  R26,LOW(_password)
000451 e0b2      	LDI  R27,HIGH(_password)
000452 940e 036b 	CALL _itoa
000454 e6ae      	LDI  R26,LOW(_password)
000455 e0b2      	LDI  R27,HIGH(_password)
000456 940c 03f8 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000458 eea8      	LDI  R26,LOW(1000)
000459 e0b3      	LDI  R27,HIGH(1000)
00045a 940e 04e6 	CALL __MULW12
00045c 01bf      	MOVW R22,R30
00045d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
00045e e6a4      	LDI  R26,LOW(100)
00045f e0b0      	LDI  R27,HIGH(100)
000460 940e 04e6 	CALL __MULW12
                +
000462 0f6e     +ADD R22 , R30
000463 1f7f     +ADC R23 , R31
                 	__ADDWRR 22,23,30,31
000464 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
000465 e0aa      	LDI  R26,LOW(10)
000466 e0b0      	LDI  R27,HIGH(10)
000467 940e 04e6 	CALL __MULW12
000469 0fe6      	ADD  R30,R22
00046a 1ff7      	ADC  R31,R23
00046b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
00046c e0e0      	LDI  R30,LOW(0)
00046d 93ea      	ST   -Y,R30
00046e e0a0      	LDI  R26,LOW(0)
00046f 940e 03b9 	CALL _lcd_gotoxy
                +
000471 e8a4     +LDI R26 , LOW ( 2 * _0x0 + ( 14 ) )
000472 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 14 ) )
                 	__POINTW2FN _0x0,14
000473 940e 0407 	CALL _lcd_putsf
000475 e0e0      	LDI  R30,LOW(0)
000476 93ea      	ST   -Y,R30
000477 e0a1      	LDI  R26,LOW(1)
000478 940c 03b9 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0x6:
00047a 940e 0407 	CALL _lcd_putsf
00047c eea8      	LDI  R26,LOW(1000)
00047d e0b3      	LDI  R27,HIGH(1000)
00047e 940e 04ca 	CALL _delay_ms
000480 940c 03ca 	JMP  _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x7:
000482 e0e0      	LDI  R30,LOW(0)
000483 93ea      	ST   -Y,R30
000484 e0a0      	LDI  R26,LOW(0)
000485 940c 03b9 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
000487 940e 0407 	CALL _lcd_putsf
000489 e0e0      	LDI  R30,LOW(0)
00048a 93ea      	ST   -Y,R30
00048b e0a1      	LDI  R26,LOW(1)
00048c 940e 03b9 	CALL _lcd_gotoxy
00048e 940c 00ea 	JMP  _key
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:57 WORDS
                 SUBOPT_0x9:
000490 01de      	MOVW R26,R28
000491 961c      	ADIW R26,12
000492 940e 036b 	CALL _itoa
000494 01de      	MOVW R26,R28
000495 961a      	ADIW R26,10
000496 940e 03f8 	CALL _lcd_puts
000498 eca8      	LDI  R26,LOW(200)
000499 e0b0      	LDI  R27,0
00049a 940e 04ca 	CALL _delay_ms
00049c 940c 00ea 	JMP  _key
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xA:
00049e 93fa      	ST   -Y,R31
00049f 93ea      	ST   -Y,R30
0004a0 cfef      	RJMP SUBOPT_0x9
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xB:
0004a1 93fa      	ST   -Y,R31
0004a2 93ea      	ST   -Y,R30
0004a3 01de      	MOVW R26,R28
0004a4 961c      	ADIW R26,12
0004a5 940e 036b 	CALL _itoa
0004a7 01de      	MOVW R26,R28
0004a8 961a      	ADIW R26,10
0004a9 940e 03f8 	CALL _lcd_puts
0004ab eca8      	LDI  R26,LOW(200)
0004ac e0b0      	LDI  R27,0
0004ad 940c 04ca 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0xC:
0004af e0e0      	LDI  R30,LOW(0)
0004b0 93ea      	ST   -Y,R30
0004b1 e0a1      	LDI  R26,LOW(1)
0004b2 940c 03b9 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:60 WORDS
                 SUBOPT_0xD:
0004b4 940e 03d8 	CALL _lcd_putchar
0004b6 e3a2      	LDI  R26,LOW(50)
0004b7 e0b0      	LDI  R27,0
0004b8 940e 04ca 	CALL _delay_ms
0004ba 01d8      	MOVW R26,R16
0004bb 940c 0137 	JMP  _amaliat
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
0004bd 940e 03ad 	CALL __lcd_write_data
0004bf e0a3      	LDI  R26,LOW(3)
0004c0 e0b0      	LDI  R27,0
0004c1 940c 04ca 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xF:
0004c3 e3a0      	LDI  R26,LOW(48)
0004c4 940e 0399 	CALL __lcd_write_nibble_G101
                +
0004c6 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0004c7 958a     +DEC R24
0004c8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0004c9 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0004ca 9610      	adiw r26,0
0004cb f039      	breq __delay_ms1
                 __delay_ms0:
0004cc 95a8      	wdr
                +
0004cd ef8a     +LDI R24 , LOW ( 0xFA )
0004ce e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0004cf 9701     +SBIW R24 , 1
0004d0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0004d1 9711      	sbiw r26,1
0004d2 f7c9      	brne __delay_ms0
                 __delay_ms1:
0004d3 9508      	ret
                 
                 __ANEGW1:
0004d4 95f1      	NEG  R31
0004d5 95e1      	NEG  R30
0004d6 40f0      	SBCI R31,0
0004d7 9508      	RET
                 
                 __MULW12U:
0004d8 9ffa      	MUL  R31,R26
0004d9 2df0      	MOV  R31,R0
0004da 9feb      	MUL  R30,R27
0004db 0df0      	ADD  R31,R0
0004dc 9fea      	MUL  R30,R26
0004dd 2de0      	MOV  R30,R0
0004de 0df1      	ADD  R31,R1
0004df 9508      	RET
                 
                 __MULB1W2U:
0004e0 2f6e      	MOV  R22,R30
0004e1 9f6a      	MUL  R22,R26
0004e2 01f0      	MOVW R30,R0
0004e3 9f6b      	MUL  R22,R27
0004e4 0df0      	ADD  R31,R0
0004e5 9508      	RET
                 
                 __MULW12:
0004e6 d025      	RCALL __CHKSIGNW
0004e7 dff0      	RCALL __MULW12U
0004e8 f40e      	BRTC __MULW121
0004e9 dfea      	RCALL __ANEGW1
                 __MULW121:
0004ea 9508      	RET
                 
                 __DIVW21U:
0004eb 2400      	CLR  R0
0004ec 2411      	CLR  R1
0004ed e190      	LDI  R25,16
                 __DIVW21U1:
0004ee 0faa      	LSL  R26
0004ef 1fbb      	ROL  R27
0004f0 1c00      	ROL  R0
0004f1 1c11      	ROL  R1
0004f2 1a0e      	SUB  R0,R30
0004f3 0a1f      	SBC  R1,R31
0004f4 f418      	BRCC __DIVW21U2
0004f5 0e0e      	ADD  R0,R30
0004f6 1e1f      	ADC  R1,R31
0004f7 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0004f8 60a1      	SBR  R26,1
                 __DIVW21U3:
0004f9 959a      	DEC  R25
0004fa f799      	BRNE __DIVW21U1
0004fb 01fd      	MOVW R30,R26
0004fc 01d0      	MOVW R26,R0
0004fd 9508      	RET
                 
                 __MODW21:
0004fe 94e8      	CLT
0004ff ffb7      	SBRS R27,7
000500 c004      	RJMP __MODW211
000501 95a0      	COM  R26
000502 95b0      	COM  R27
000503 9611      	ADIW R26,1
000504 9468      	SET
                 __MODW211:
000505 fdf7      	SBRC R31,7
000506 dfcd      	RCALL __ANEGW1
000507 dfe3      	RCALL __DIVW21U
000508 01fd      	MOVW R30,R26
000509 f40e      	BRTC __MODW212
00050a dfc9      	RCALL __ANEGW1
                 __MODW212:
00050b 9508      	RET
                 
                 __CHKSIGNW:
00050c 94e8      	CLT
00050d fff7      	SBRS R31,7
00050e c002      	RJMP __CHKSW1
00050f dfc4      	RCALL __ANEGW1
000510 9468      	SET
                 __CHKSW1:
000511 ffb7      	SBRS R27,7
000512 c006      	RJMP __CHKSW2
000513 95a0      	COM  R26
000514 95b0      	COM  R27
000515 9611      	ADIW R26,1
000516 f800      	BLD  R0,0
000517 9403      	INC  R0
000518 fa00      	BST  R0,0
                 __CHKSW2:
000519 9508      	RET
                 
                 __GETW1PF:
00051a 9005      	LPM  R0,Z+
00051b 91f4      	LPM  R31,Z
00051c 2de0      	MOV  R30,R0
00051d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  21 r1 :   6 r2 :   0 r3 :   0 r4 :  11 r5 :   4 r6 :   2 r7 :   2 
r8 :   2 r9 :   2 r10:   2 r11:   2 r12:   2 r13:   2 r14:   0 r15:   0 
r16:   4 r17:   8 r18:   4 r19:   2 r20:   4 r21:   2 r22:  18 r23:   2 
r24:  27 r25:  10 r26: 173 r27:  75 r28:  14 r29:   1 r30: 249 r31: 110 
x  :   7 y  : 188 z  :  12 
Registers used: 31 out of 35 (88.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   8 add   :  12 
adiw  :  22 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   9 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  39 brpl  :   1 brsh  :   0 brtc  :   2 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 105 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   7 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   6 
cp    :  11 cpc   :  20 cpi   :  14 cpse  :   0 dec   :   8 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   2 jmp   :  34 ld    :  24 ldd   :  72 ldi   : 187 
lds   :  18 lpm   :  14 lsl   :   3 lsr   :   0 mov   :  10 movw  :  29 
mul   :   5 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   1 out   :  17 pop   :   0 push  :   0 rcall :  27 ret   :  21 
reti  :   0 rjmp  :  54 rol   :   5 ror   :   0 sbc   :   2 sbci  :   3 
sbi   :   7 sbic  :   3 sbis  :   3 sbiw  :  18 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  50 std   :  50 sts   :  21 sub   :   2 subi  :   7 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 62 out of 116 (53.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a3c   2326    294   2620   32768   8.0%
[.dseg] 0x000060 0x000289      0     41     41    2048   2.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 13 warnings
